---
import Layout from '../layouts/Layout.astro';
---

<Layout title="シンプルなTodoアプリ - 初心者向け Webアプリ開発講座">
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-3xl mx-auto">
      <h1 class="text-3xl font-bold mb-8 text-kinova-gray text-center">シンプルなTodoアプリ</h1>
      
      <div class="bg-white rounded-lg shadow-md p-8 mb-8">
        <div id="todo-app" class="max-w-md mx-auto">
          <div class="flex mb-4">
            <input 
              type="text" 
              id="new-task" 
              placeholder="新しいタスクを入力..." 
              class="flex-grow px-3 py-2 border border-gray-300 rounded-l-md focus:outline-none focus:ring-2 focus:ring-kinova-teal" 
            />
            <button 
              id="add-task" 
              class="bg-kinova-teal text-white px-4 py-2 rounded-r-md hover:bg-kinova-orange transition-colors"
            >
              追加
            </button>
          </div>
          
          <ul id="task-list" class="space-y-2">
            <!-- タスクはJavaScriptで動的に追加されます -->
          </ul>
          
          <div class="mt-6 text-center">
            <p id="task-count" class="text-gray-600">タスク: 0件</p>
          </div>
        </div>
      </div>
      
      <div class="bg-gray-100 rounded-lg p-6">
        <h2 class="text-xl font-semibold mb-4 text-kinova-gray">このアプリについて</h2>
        <p class="text-gray-700 mb-4">
          このシンプルなTodoアプリは、JavaScriptを使って作られています。タスクはブラウザのローカルストレージに保存されるため、
          ページを更新しても入力したタスクは消えません。
        </p>
        <p class="text-gray-700">
          このアプリは「初心者向け Webアプリ開発講座」の一部として作成されました。
          実際のアプリ開発の流れを体験するための参考例としてご利用ください。
        </p>
      </div>
    </div>
  </div>
</Layout>

<script>
  // Todoアプリの機能を実装するJavaScript
  document.addEventListener('DOMContentLoaded', () => {
    const newTaskInput = document.getElementById('new-task');
    const addTaskButton = document.getElementById('add-task');
    const taskList = document.getElementById('task-list');
    const taskCount = document.getElementById('task-count');
    
    if (!newTaskInput || !addTaskButton || !taskList || !taskCount) {
      console.error('Required elements not found');
      return;
    }
    
    // ローカルストレージからタスクを取得
    let tasks = JSON.parse(localStorage.getItem('tasks') || '[]');
    
    // タスクを表示する関数
    const renderTasks = () => {
      if (!taskList || !taskCount) return;
      
      taskList.innerHTML = '';
      
      tasks.forEach((task, index) => {
        const li = document.createElement('li');
        li.className = 'flex items-center justify-between bg-white p-3 rounded-md shadow-sm border border-gray-200';
        
        const leftDiv = document.createElement('div');
        leftDiv.className = 'flex items-center';
        
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.className = 'mr-3 h-5 w-5 text-kinova-teal';
        checkbox.checked = task.completed;
        checkbox.addEventListener('change', () => toggleTask(index));
        
        const span = document.createElement('span');
        span.textContent = task.text;
        if (task.completed) {
          span.className = 'line-through text-gray-500';
        }
        
        leftDiv.appendChild(checkbox);
        leftDiv.appendChild(span);
        
        const deleteButton = document.createElement('button');
        deleteButton.className = 'text-red-500 hover:text-red-700';
        deleteButton.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
          </svg>
        `;
        deleteButton.addEventListener('click', () => deleteTask(index));
        
        li.appendChild(leftDiv);
        li.appendChild(deleteButton);
        
        taskList.appendChild(li);
      });
      
      // タスク数を更新
      taskCount.textContent = `タスク: ${tasks.length}件`;
    };
    
    // タスクを追加する関数
    const addTask = () => {
      if (!newTaskInput) return;
      
      const text = newTaskInput.value.trim();
      if (text) {
        const newTask = {
          id: Date.now().toString(),
          text,
          completed: false
        };
        
        tasks.push(newTask);
        saveTasks();
        newTaskInput.value = '';
        renderTasks();
      }
    };
    
    // タスクの完了状態を切り替える関数
    const toggleTask = (index) => {
      tasks[index].completed = !tasks[index].completed;
      saveTasks();
      renderTasks();
    };
    
    // タスクを削除する関数
    const deleteTask = (index) => {
      tasks.splice(index, 1);
      saveTasks();
      renderTasks();
    };
    
    // ローカルストレージにタスクを保存する関数
    const saveTasks = () => {
      localStorage.setItem('tasks', JSON.stringify(tasks));
    };
    
    // イベントリスナーを設定
    addTaskButton.addEventListener('click', addTask);
    newTaskInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        addTask();
      }
    });
    
    // 初期表示
    renderTasks();
    
    // サンプルタスクを追加（初回のみ）
    if (tasks.length === 0) {
      tasks = [
        { id: '1', text: 'メールを確認する', completed: true },
        { id: '2', text: '牛乳を買う', completed: false },
        { id: '3', text: 'プログラミングの勉強をする', completed: false }
      ];
      saveTasks();
      renderTasks();
    }
  });
</script>