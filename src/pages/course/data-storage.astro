---
import Layout from '../../layouts/Layout.astro';
import Newsletter from '../../components/Newsletter.astro';
---

<Layout title="データを保存するしくみを学ぼう - 初心者向け Webアプリ開発講座">
  <div class="container mx-auto px-4 py-12">
    <div class="max-w-4xl mx-auto">
      <!-- ヘッダーセクション -->
      <div class="bg-gradient-to-r from-kinova-teal to-kinova-orange rounded-lg shadow-lg overflow-hidden mb-12">
        <div class="p-8 text-white">
          <div class="flex items-center gap-2 mb-4">
            <span class="text-sm bg-white/20 px-3 py-1 rounded-full">データベース</span>
            <span class="text-sm">2025年1月20日</span>
          </div>
          <h1 class="text-4xl font-bold mb-4">データを保存するしくみを学ぼう</h1>
          <p class="text-xl opacity-90 mb-6">
            Webアプリケーションでデータを保存・管理する方法について、初心者にも分かりやすく解説します。データベースの基本から実際の使い方まで、図解でしっかり理解しましょう！
          </p>
          <div class="flex items-center gap-3">
            <div class="w-10 h-10 rounded-full bg-white flex items-center justify-center text-kinova-teal">
              <span class="text-xl">👩‍💻</span>
            </div>
            <div>
              <p class="font-medium">Kinova編集部</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- 目次 -->
      <div class="bg-white rounded-lg shadow-md p-6 mb-12">
        <h2 class="text-xl font-semibold mb-4 text-kinova-gray">目次</h2>
        <ul class="space-y-3">
          <li>
            <a href="#intro" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">1</span>
              データはどこに保存されるの？
            </a>
          </li>
          <li>
            <a href="#database-types" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">2</span>
              データベースの種類と特徴
            </a>
          </li>
          <li>
            <a href="#data-organization" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">3</span>
              データを整理する方法
            </a>
          </li>
          <li>
            <a href="#sql-basics" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">4</span>
              SQLの基本：データベースと会話しよう
            </a>
          </li>
          <li>
            <a href="#todo-example" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">5</span>
              TODOアプリのデータ設計例
            </a>
          </li>
          <li>
            <a href="#security" class="flex items-center text-kinova-teal hover:text-kinova-orange transition-colors">
              <span class="w-6 h-6 rounded-full bg-kinova-teal/10 flex items-center justify-center mr-2 text-kinova-teal">6</span>
              データを安全に守るには？
            </a>
          </li>
        </ul>
      </div>
      
      <!-- 本文 -->
      <div class="space-y-12">
        <!-- データはどこに保存されるの？ -->
        <section id="intro" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">1</span>
            データはどこに保存されるの？
          </h2>
          
          <p class="text-gray-700 mb-6">
            Webアプリを使っていると、入力した情報がどこかに保存されていることに気づきます。例えば、Twitterに投稿した内容は次にログインしても残っていますし、オンラインショッピングサイトのカートに入れた商品も記憶されています。これらのデータはいったいどこに保存されているのでしょうか？
          </p>
          
          <div class="bg-gradient-to-r from-blue-100 to-indigo-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-blue-300">
              <h3 class="text-xl font-semibold text-blue-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">💾</span>
                データの保存場所
              </h3>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                <div class="bg-blue-50 rounded-lg p-4">
                  <h4 class="font-semibold text-blue-700 mb-2 flex items-center">
                    <span class="text-xl mr-2">💻</span>
                    クライアント側（ブラウザ）
                  </h4>
                  <p class="text-gray-700 mb-2">
                    あなたのパソコンやスマホのブラウザ内に保存される場所です。
                  </p>
                  <div class="flex flex-wrap gap-2">
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">Cookie</span>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">LocalStorage</span>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">SessionStorage</span>
                  </div>
                  <div class="mt-3 text-sm text-gray-600">
                    <p>👍 メリット：高速、インターネット接続なしでも動作可能</p>
                    <p>👎 デメリット：容量制限あり、他の端末からアクセスできない</p>
                  </div>
                </div>
                
                <div class="bg-blue-50 rounded-lg p-4">
                  <h4 class="font-semibold text-blue-700 mb-2 flex items-center">
                    <span class="text-xl mr-2">🖥️</span>
                    サーバー側
                  </h4>
                  <p class="text-gray-700 mb-2">
                    インターネット上のサーバーコンピュータに保存される場所です。
                  </p>
                  <div class="flex flex-wrap gap-2">
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">データベース</span>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">ファイルシステム</span>
                    <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full">クラウドストレージ</span>
                  </div>
                  <div class="mt-3 text-sm text-gray-600">
                    <p>👍 メリット：大容量、どの端末からもアクセス可能</p>
                    <p>👎 デメリット：インターネット接続が必要、設定が複雑</p>
                  </div>
                </div>
              </div>
              
              <div class="bg-indigo-50 p-4 rounded-lg">
                <h4 class="font-semibold text-indigo-700 mb-2">実際のWebアプリでは？</h4>
                <p class="text-gray-700 mb-4">
                  多くのWebアプリでは、クライアント側とサーバー側の両方を組み合わせてデータを保存します。例えば：
                </p>
                <ul class="space-y-2">
                  <li class="flex items-start">
                    <span class="text-indigo-500 mr-2">✓</span>
                    <span><strong>一時的な情報</strong>（設定、表示状態など）→ クライアント側</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-indigo-500 mr-2">✓</span>
                    <span><strong>重要なデータ</strong>（ユーザー情報、投稿内容など）→ サーバー側</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="text-center text-sm text-indigo-700 bg-indigo-50 p-3 rounded-lg mt-4">
              この記事では、主にサーバー側でのデータ保存、特に<strong>データベース</strong>について詳しく見ていきます。<br>
              データベースは多くのWebアプリで中心的な役割を果たしており、効率的にデータを管理するための仕組みです。
            </div>
          </div>
          
          <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-yellow-700">
                  <strong>例えるなら：</strong> クライアント側のストレージはあなたのポケットのメモ帳、サーバー側のデータベースは図書館の本棚のようなものです。メモ帳は手元にあって使いやすいですが、限られた情報しか書けません。一方、図書館の本棚は大量の情報を整理して保存できますが、利用するには図書館に行く必要があります。
                </p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- データベースの種類と特徴 -->
        <section id="database-types" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">2</span>
            データベースの種類と特徴
          </h2>
          
          <p class="text-gray-700 mb-6">
            データベースには様々な種類があり、それぞれ得意な用途や特徴が異なります。ここでは、主要なデータベースの種類とその特徴について見ていきましょう。
          </p>
          
          <div class="bg-gradient-to-r from-purple-100 to-pink-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-purple-300 mb-6">
              <h3 class="text-xl font-semibold text-purple-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🗃️</span>
                リレーショナルデータベース（RDB）
              </h3>
              
              <div class="flex flex-col md:flex-row gap-6 mb-4">
                <div class="md:w-1/2">
                  <div class="bg-purple-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-purple-700 mb-2">特徴</h4>
                    <ul class="space-y-2">
                      <li class="flex items-start">
                        <span class="text-purple-500 mr-2">✓</span>
                        <span>データを「表（テーブル）」の形で管理</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-purple-500 mr-2">✓</span>
                        <span>表と表の間に「関係（リレーション）」を定義できる</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-purple-500 mr-2">✓</span>
                        <span>SQLという言語でデータを操作</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-purple-500 mr-2">✓</span>
                        <span>データの整合性を保つ仕組みが充実</span>
                      </li>
                    </ul>
                  </div>
                </div>
                
                <div class="md:w-1/2">
                  <div class="bg-purple-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-purple-700 mb-2">代表的な製品</h4>
                    <div class="grid grid-cols-2 gap-2">
                      <div class="bg-white p-2 rounded border border-purple-200">
                        <h5 class="font-medium text-purple-700">MySQL</h5>
                        <p class="text-xs text-gray-600">無料で使える人気のDB</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-purple-200">
                        <h5 class="font-medium text-purple-700">PostgreSQL</h5>
                        <p class="text-xs text-gray-600">高機能なオープンソースDB</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-purple-200">
                        <h5 class="font-medium text-purple-700">SQLite</h5>
                        <p class="text-xs text-gray-600">ファイル型の軽量DB</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-purple-200">
                        <h5 class="font-medium text-purple-700">Oracle</h5>
                        <p class="text-xs text-gray-600">企業向け商用DB</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-white border border-purple-200 rounded-lg p-4 mb-4">
                <h4 class="font-semibold text-purple-700 mb-2">テーブルの例（ユーザー情報）</h4>
                <div class="overflow-x-auto">
                  <table class="min-w-full bg-white">
                    <thead class="bg-purple-100">
                      <tr>
                        <th class="py-2 px-4 border-b border-purple-200 text-left text-xs font-semibold text-purple-700 uppercase tracking-wider">id</th>
                        <th class="py-2 px-4 border-b border-purple-200 text-left text-xs font-semibold text-purple-700 uppercase tracking-wider">名前</th>
                        <th class="py-2 px-4 border-b border-purple-200 text-left text-xs font-semibold text-purple-700 uppercase tracking-wider">メールアドレス</th>
                        <th class="py-2 px-4 border-b border-purple-200 text-left text-xs font-semibold text-purple-700 uppercase tracking-wider">登録日</th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>
                        <td class="py-2 px-4 border-b border-gray-200">1</td>
                        <td class="py-2 px-4 border-b border-gray-200">山田太郎</td>
                        <td class="py-2 px-4 border-b border-gray-200">yamada@example.com</td>
                        <td class="py-2 px-4 border-b border-gray-200">2023-01-15</td>
                      </tr>
                      <tr class="bg-gray-50">
                        <td class="py-2 px-4 border-b border-gray-200">2</td>
                        <td class="py-2 px-4 border-b border-gray-200">佐藤花子</td>
                        <td class="py-2 px-4 border-b border-gray-200">sato@example.com</td>
                        <td class="py-2 px-4 border-b border-gray-200">2023-02-20</td>
                      </tr>
                      <tr>
                        <td class="py-2 px-4 border-b border-gray-200">3</td>
                        <td class="py-2 px-4 border-b border-gray-200">鈴木一郎</td>
                        <td class="py-2 px-4 border-b border-gray-200">suzuki@example.com</td>
                        <td class="py-2 px-4 border-b border-gray-200">2023-03-10</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
              
              <div class="bg-purple-50 p-4 rounded-lg">
                <h4 class="font-semibold text-purple-700 mb-2">向いている用途</h4>
                <ul class="space-y-1 text-sm">
                  <li class="flex items-start">
                    <span class="text-purple-500 mr-2">•</span>
                    <span>構造化されたデータを扱うアプリケーション</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-purple-500 mr-2">•</span>
                    <span>複数のデータ間に関連性がある場合</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-purple-500 mr-2">•</span>
                    <span>トランザクション処理が必要なシステム（銀行、ECサイトなど）</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-pink-300">
              <h3 class="text-xl font-semibold text-pink-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">📊</span>
                NoSQLデータベース
              </h3>
              
              <div class="flex flex-col md:flex-row gap-6 mb-4">
                <div class="md:w-1/2">
                  <div class="bg-pink-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-pink-700 mb-2">特徴</h4>
                    <ul class="space-y-2">
                      <li class="flex items-start">
                        <span class="text-pink-500 mr-2">✓</span>
                        <span>柔軟なデータ構造（テーブル構造に縛られない）</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-pink-500 mr-2">✓</span>
                        <span>大量データの高速処理に強い</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-pink-500 mr-2">✓</span>
                        <span>水平スケーリングが容易（サーバーを増やして対応可能）</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-pink-500 mr-2">✓</span>
                        <span>SQLを使わない独自のクエリ方法</span>
                      </li>
                    </ul>
                  </div>
                </div>
                
                <div class="md:w-1/2">
                  <div class="bg-pink-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-pink-700 mb-2">主な種類と代表的な製品</h4>
                    <div class="space-y-2">
                      <div class="bg-white p-2 rounded border border-pink-200">
                        <h5 class="font-medium text-pink-700">ドキュメント型</h5>
                        <p class="text-xs text-gray-600">MongoDB, CouchDB</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-pink-200">
                        <h5 class="font-medium text-pink-700">キーバリュー型</h5>
                        <p class="text-xs text-gray-600">Redis, DynamoDB</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-pink-200">
                        <h5 class="font-medium text-pink-700">カラム指向型</h5>
                        <p class="text-xs text-gray-600">Cassandra, HBase</p>
                      </div>
                      <div class="bg-white p-2 rounded border border-pink-200">
                        <h5 class="font-medium text-pink-700">グラフ型</h5>
                        <p class="text-xs text-gray-600">Neo4j, ArangoDB</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-white border border-pink-200 rounded-lg p-4 mb-4">
                <h4 class="font-semibold text-pink-700 mb-2">ドキュメント型DBのデータ例（JSON形式）</h4>
                <pre class="bg-gray-100 p-3 rounded text-sm overflow-x-auto">
                  <code class="language-json">{String.raw`
{
  "_id": "60a1c340b5d8f1234a567890",
  "name": "山田太郎",
  "email": "yamada@example.com",
  "registered_at": "2023-01-15",
  "preferences": {
    "theme": "dark",
    "notifications": true
  },
  "tags": ["premium", "active"]
}
                  `}</code>
                </pre>
              </div>
              
              <div class="bg-pink-50 p-4 rounded-lg">
                <h4 class="font-semibold text-pink-700 mb-2">向いている用途</h4>
                <ul class="space-y-1 text-sm">
                  <li class="flex items-start">
                    <span class="text-pink-500 mr-2">•</span>
                    <span>大量のデータを扱うアプリケーション</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-pink-500 mr-2">•</span>
                    <span>データ構造が頻繁に変わる可能性がある場合</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-pink-500 mr-2">•</span>
                    <span>高速な読み書きが必要なシステム（SNS、ログ分析など）</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="text-center text-sm text-purple-700 bg-purple-50 p-3 rounded-lg mt-4">
              初心者の方は、まずリレーショナルデータベース（特にMySQL、PostgreSQL、SQLite）から学ぶことをおすすめします。<br>
              基本的な概念を理解した後で、必要に応じてNoSQLデータベースについても学んでいくとよいでしょう。
            </div>
          </div>
          
          <div class="bg-blue-50 border-l-4 border-blue-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-blue-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-blue-700">
                  <strong>例えるなら：</strong> リレーショナルデータベースは整理された本棚のようなもので、本（データ）が決まった場所に分類されて並んでいます。一方、NoSQLデータベースは、フレキシブルな収納ボックスのようなもので、様々な形や大きさのものを自由に収納できます。どちらが良いかは、何を収納したいかによって変わります。
                </p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- データを整理する方法 -->
        <section id="data-organization" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">3</span>
            データを整理する方法
          </h2>
          
          <p class="text-gray-700 mb-6">
            データベースを効果的に使うためには、データを適切に整理することが重要です。特にリレーショナルデータベースでは、データの構造をしっかり設計することで、効率的なデータ管理が可能になります。ここでは、データを整理するための基本的な考え方を見ていきましょう。
          </p>
          
          <div class="bg-gradient-to-r from-green-100 to-teal-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-green-300 mb-6">
              <h3 class="text-xl font-semibold text-green-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">📋</span>
                テーブル設計の基本
              </h3>
              
              <div class="bg-green-50 p-4 rounded-lg mb-6">
                <h4 class="font-semibold text-green-700 mb-2">テーブルとは？</h4>
                <p class="text-gray-700 mb-2">
                  テーブルは、データベース内でデータを保存する「表」のことです。例えば、「ユーザー」「商品」「注文」など、データの種類ごとに別々のテーブルを作ります。
                </p>
                <p class="text-gray-700">
                  テーブルは<strong>行（レコード）</strong>と<strong>列（カラム）</strong>で構成されます。行は1つのデータの集まり、列はデータの項目（属性）を表します。
                </p>
              </div>
              
              <div class="flex flex-col md:flex-row gap-6 mb-6">
                <div class="md:w-1/2">
                  <div class="bg-green-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-green-700 mb-2">主キー（Primary Key）</h4>
                    <p class="text-gray-700 mb-2">
                      各レコード（行）を一意に識別するための列です。
                    </p>
                    <ul class="space-y-1 text-sm">
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>重複しない値を持つ</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>NULL（空）にならない</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>変更されにくい値が望ましい</span>
                      </li>
                    </ul>
                    <div class="mt-2 p-2 bg-white rounded border border-green-200">
                      <p class="text-xs text-gray-600">
                        例：ユーザーテーブルの「id」列、商品テーブルの「商品コード」列など
                      </p>
                    </div>
                  </div>
                </div>
                
                <div class="md:w-1/2">
                  <div class="bg-green-50 rounded-lg p-4 h-full">
                    <h4 class="font-semibold text-green-700 mb-2">外部キー（Foreign Key）</h4>
                    <p class="text-gray-700 mb-2">
                      他のテーブルとの関連付けに使用する列です。
                    </p>
                    <ul class="space-y-1 text-sm">
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>他のテーブルの主キーを参照する</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>テーブル間の関係を定義する</span>
                      </li>
                      <li class="flex items-start">
                        <span class="text-green-500 mr-2">•</span>
                        <span>データの整合性を保つ</span>
                      </li>
                    </ul>
                    <div class="mt-2 p-2 bg-white rounded border border-green-200">
                      <p class="text-xs text-gray-600">
                        例：注文テーブルの「ユーザーID」列（ユーザーテーブルの「id」を参照）
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-white border border-green-200 rounded-lg p-4 mb-4">
                <h4 class="font-semibold text-green-700 mb-2">テーブル間の関係</h4>
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div class="bg-green-50 p-3 rounded">
                    <h5 class="font-medium text-green-700 mb-1">1対1の関係</h5>
                    <p class="text-xs text-gray-700 mb-2">
                      テーブルAの1レコードがテーブルBの1レコードと関連
                    </p>
                    <div class="p-2 bg-white rounded border border-green-200 text-xs">
                      例：ユーザーテーブルと詳細プロフィールテーブル
                    </div>
                  </div>
                  <div class="bg-green-50 p-3 rounded">
                    <h5 class="font-medium text-green-700 mb-1">1対多の関係</h5>
                    <p class="text-xs text-gray-700 mb-2">
                      テーブルAの1レコードがテーブルBの複数レコードと関連
                    </p>
                    <div class="p-2 bg-white rounded border border-green-200 text-xs">
                      例：ユーザーテーブルと注文テーブル（1人のユーザーが複数の注文を持つ）
                    </div>
                  </div>
                  <div class="bg-green-50 p-3 rounded">
                    <h5 class="font-medium text-green-700 mb-1">多対多の関係</h5>
                    <p class="text-xs text-gray-700 mb-2">
                      テーブルAの複数レコードがテーブルBの複数レコードと関連
                    </p>
                    <div class="p-2 bg-white rounded border border-green-200 text-xs">
                      例：商品テーブルとカテゴリテーブル（中間テーブルが必要）
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-green-50 p-4 rounded-lg">
                <h4 class="font-semibold text-green-700 mb-2">データ型の選択</h4>
                <p class="text-gray-700 mb-2">
                  各列（カラム）には適切なデータ型を設定します。主な種類は：
                </p>
                <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-2 text-sm">
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">整数型</span>：INT, BIGINT
                  </div>
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">小数型</span>：DECIMAL, FLOAT
                  </div>
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">文字列型</span>：VARCHAR, TEXT
                  </div>
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">日時型</span>：DATE, TIMESTAMP
                  </div>
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">真偽型</span>：BOOLEAN
                  </div>
                  <div class="bg-white p-2 rounded border border-green-200">
                    <span class="font-medium text-green-700">バイナリ型</span>：BLOB
                  </div>
                </div>
              </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-teal-300">
              <h3 class="text-xl font-semibold text-teal-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🧩</span>
                データベース設計のポイント
              </h3>
              
              <div class="space-y-4">
                <div class="bg-teal-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-teal-700 mb-2">1. 正規化（Normalization）</h4>
                  <p class="text-gray-700 mb-2">
                    データの重複を減らし、整合性を高めるための手法です。
                  </p>
                  <div class="p-3 bg-white rounded border border-teal-200 text-sm">
                    <p class="mb-2"><strong>例：</strong> 「注文」テーブルに「ユーザー名」を直接保存するのではなく、「ユーザーID」を保存して「ユーザー」テーブルを参照するようにします。こうすることで、ユーザー名が変更された場合に一箇所だけ更新すればよくなります。</p>
                    <p class="text-xs text-gray-600">※ただし、過度な正規化はパフォーマンスの低下を招くこともあります。</p>
                  </div>
                </div>
                
                <div class="bg-teal-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-teal-700 mb-2">2. インデックス（Index）の活用</h4>
                  <p class="text-gray-700 mb-2">
                    検索を高速化するための仕組みです。
                  </p>
                  <div class="p-3 bg-white rounded border border-teal-200 text-sm">
                    <p class="mb-2">よく検索条件として使われる列にインデックスを設定すると、データの検索が速くなります。</p>
                    <p class="text-xs text-gray-600">※ただし、インデックスを増やしすぎると、データ更新時のオーバーヘッドが大きくなります。</p>
                  </div>
                </div>
                
                <div class="bg-teal-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-teal-700 mb-2">3. 制約（Constraint）の設定</h4>
                  <p class="text-gray-700 mb-2">
                    データの整合性を保つためのルールです。
                  </p>
                  <ul class="space-y-1 text-sm p-3 bg-white rounded border border-teal-200">
                    <li><strong>NOT NULL</strong>：NULL値を許可しない</li>
                    <li><strong>UNIQUE</strong>：重複値を許可しない</li>
                    <li><strong>CHECK</strong>：特定の条件を満たすことを要求</li>
                    <li><strong>DEFAULT</strong>：デフォルト値を設定</li>
                    <li><strong>FOREIGN KEY</strong>：他のテーブルとの関連付け</li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="text-center text-sm text-teal-700 bg-teal-50 p-3 rounded-lg mt-4">
              データベース設計は、アプリケーション開発の重要な基盤となります。<br>
              最初に時間をかけて適切に設計することで、後々の開発や保守が格段に楽になります。
            </div>
          </div>
          
          <div class="bg-red-50 border-l-4 border-red-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-red-700">
                  <strong>よくある失敗：</strong> データベース設計で最もよくある失敗は、将来の変更を考慮せずに設計してしまうことです。例えば、「ユーザーの住所は1つだけ」と考えて設計したものの、後から「複数の配送先住所が必要」となった場合、大幅な設計変更が必要になります。可能な限り、将来の拡張性を考慮した設計を心がけましょう。
                </p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- SQLの基本 -->
        <section id="sql-basics" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">4</span>
            SQLの基本：データベースと会話しよう
          </h2>
          
          <p class="text-gray-700 mb-6">
            SQL（Structured Query Language）は、リレーショナルデータベースを操作するための言語です。SQLを使うことで、データの追加、取得、更新、削除などの操作を行うことができます。ここでは、SQLの基本的な使い方を見ていきましょう。
          </p>
          
          <div class="bg <div class=bg-gradient-to-r from-amber-100 to-orange-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-amber-300 mb-6">
              <h3 class="text-xl font-semibold text-amber-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🔍</span>
                SQLの基本コマンド
              </h3>
              
              <div class="space-y-6">
                <div class="bg-amber-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-amber-700 mb-2">SELECT：データの取得</h4>
                  <p class="text-gray-700 mb-2">
                    テーブルからデータを取得するためのコマンドです。
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto mb-2">
                    <pre><code>{String.raw`-- 基本的な形式
SELECT カラム名1, カラム名2, ... FROM テーブル名;

-- 全てのカラムを取得
SELECT * FROM users;

-- 条件を指定して取得
SELECT * FROM users WHERE age >= 20;

-- 並び替えて取得
SELECT * FROM products ORDER BY price DESC;

-- 件数を制限して取得
SELECT * FROM posts LIMIT 10;`}</code></pre>
                  </div>
                  <p class="text-xs text-gray-600">
                    ※ SELECTは最も頻繁に使用されるコマンドで、様々なオプションがあります。
                  </p>
                </div>
                
                <div class="bg-amber-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-amber-700 mb-2">INSERT：データの追加</h4>
                  <p class="text-gray-700 mb-2">
                    テーブルに新しいデータを追加するためのコマンドです。
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto mb-2">
                    <pre><code>{String.raw`-- 基本的な形式
INSERT INTO テーブル名 (カラム名1, カラム名2, ...) VALUES (値1, 値2, ...);

-- 例：ユーザーを追加
INSERT INTO users (name, email, age) VALUES ('山田太郎', 'yamada@example.com', 25);

-- 複数のレコードを一度に追加
INSERT INTO products (name, price) VALUES 
  ('商品A', 1000),
  ('商品B', 2000),
  ('商品C', 3000);`}</code></pre>
                  </div>
                </div>
                
                <div class="bg-amber-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-amber-700 mb-2">UPDATE：データの更新</h4>
                  <p class="text-gray-700 mb-2">
                    既存のデータを更新するためのコマンドです。
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto mb-2">
                    <pre><code>{String.raw`-- 基本的な形式
UPDATE テーブル名 SET カラム名1 = 値1, カラム名2 = 値2, ... WHERE 条件;

-- 例：特定のユーザーのメールアドレスを更新
UPDATE users SET email = 'new_email@example.com' WHERE id = 1;

-- 複数のカラムを一度に更新
UPDATE products SET price = price * 1.1, updated_at = NOW() WHERE category = '食品';`}`</code></pre>
                  </div>
                  <p class="text-xs text-text-red-600 font-semibold">
                    ※ WHERE句を忘れると全てのレコードが更新されるので注意！
                  </p>
                </div>
                
                <div class="bg-amber-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-amber-700 mb-2">DELETE：データの削除</h4>
                  <p class="text-gray-700 mb-2">
                    データを削除するためのコマンドです。
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto mb-2">
                    <pre><code>{String.raw`-- 基本的な形式
DELETE FROM テーブル名 WHERE 条件;

-- 例：特定のユーザーを削除
DELETE FROM users WHERE id = 5;

-- 特定の条件に合うレコードを削除
DELETE FROM orders WHERE order_date < '2023-01-01';`}</code></pre>
                  </div>
                  <p class="text-xs text-text-red-600 font-semibold">
                    ※ WHERE句を忘れると全てのレコードが削除されるので要注意！
                  </p>
                </div>
                
                <div class="bg-amber-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-amber-700 mb-2">CREATE TABLE：テーブルの作成</h4>
                  <p class="text-gray-700 mb-2">
                    新しいテーブルを作成するためのコマンドです。
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto mb-2">
                    <pre><code>{String.raw`-- 基本的な形式
CREATE TABLE テーブル名 (
  カラム名1 データ型 [制約],
  カラム名2 データ型 [制約],
  ...
);

-- 例：ユーザーテーブルの作成
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  age INT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
`}</code></pre>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-orange-300">
              <h3 class="text-xl font-semibold text-orange-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🔗</span>
                テーブルの結合（JOIN）
              </h3>
              
              <p class="text-gray-700 mb-4">
                複数のテーブルからデータを組み合わせて取得するための操作です。リレーショナルデータベースの強力な機能の一つです。
              </p>
              
              <div class="bg-orange-50 p-4 rounded-lg mb-4">
                <h4 class="font-semibold text-orange-700 mb-2">JOINの種類</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="bg-white p-3 rounded border border-orange-200">
                    <h5 class="font-medium text-orange-700 mb-1">INNER JOIN</h5>
                    <p class="text-sm text-gray-700 mb-2">
                      両方のテーブルで一致するレコードのみを取得
                    </p>
                    <div class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">
                      <pre><code>SELECT u.name, o.order_date
FROM users u
INNER JOIN orders o ON u.id = o.user_id;</code></pre>
                    </div>
                  </div>
                  <div class="bg-white p-3 rounded border border-orange-200">
                    <h5 class="font-medium text-orange-700 mb-1">LEFT JOIN</h5>
                    <p class="text-sm text-gray-700 mb-2">
                      左テーブルの全レコードと、右テーブルの一致するレコードを取得
                    </p>
                    <div class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">
                      <pre><code>SELECT u.name, o.order_date
FROM users u
LEFT JOIN orders o ON u.id = o.user_id;</code></pre>
                    </div>
                  </div>
                  <div class="bg-white p-3 rounded border border-orange-200">
                    <h5 class="font-medium text-orange-700 mb-1">RIGHT JOIN</h5>
                    <p class="text-sm text-gray-700 mb-2">
                      右テーブルの全レコードと、左テーブルの一致するレコードを取得
                    </p>
                    <div class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">
                      <pre><code>SELECT u.name, o.order_date
FROM users u
RIGHT JOIN orders o ON u.id = o.user_id;</code></pre>
                    </div>
                  </div>
                  <div class="bg-white p-3 rounded border border-orange-200">
                    <h5 class="font-medium text-orange-700 mb-1">FULL JOIN</h5>
                    <p class="text-sm text-gray-700 mb-2">
                      両方のテーブルの全レコードを取得（一部のDBMSでは未対応）
                    </p>
                    <div class="bg-gray-100 p-2 rounded text-xs overflow-x-auto">
                      <pre><code>SELECT u.name, o.order_date
FROM users u
FULL JOIN orders o ON u.id = o.user_id;</code></pre>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="bg-orange-50 p-4 rounded-lg">
                <h4 class="font-semibold text-orange-700 mb-2">JOINの例（ユーザーと注文）</h4>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <h5 class="font-medium text-orange-700 mb-1">usersテーブル</h5>
                    <div class="overflow-x-auto">
                      <table class="min-w-full bg-white border border-orange-200">
                        <thead class="bg-orange-100">
                          <tr>
                            <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">id</th>
                            <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">name</th>
                          </tr>
                        </thead>
                        <tbody class="text-sm">
                          <tr>
                            <td class="py-1 px-3 border-b">1</td>
                            <td class="py-1 px-3 border-b">山田太郎</td>
                          </tr>
                          <tr>
                            <td class="py-1 px-3 border-b">2</td>
                            <td class="py-1 px-3 border-b">佐藤花子</td>
                          </tr>
                          <tr>
                            <td class="py-1 px-3 border-b">3</td>
                            <td class="py-1 px-3 border-b">鈴木一郎</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                  <div>
                    <h5 class="font-medium text-orange-700 mb-1">ordersテーブル</h5>
                    <div class="overflow-x-auto">
                      <table class="min-w-full bg-white border border-orange-200">
                        <thead class="bg-orange-100">
                          <tr>
                            <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">id</th>
                            <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">user_id</th>
                            <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">product</th>
                          </tr>
                        </thead>
                        <tbody class="text-sm">
                          <tr>
                            <td class="py-1 px-3 border-b">101</td>
                            <td class="py-1 px-3 border-b">1</td>
                            <td class="py-1 px-3 border-b">商品A</td>
                          </tr>
                          <tr>
                            <td class="py-1 px-3 border-b">102</td>
                            <td class="py-1 px-3 border-b">1</td>
                            <td class="py-1 px-3 border-b">商品B</td>
                          </tr>
                          <tr>
                            <td class="py-1 px-3 border-b">103</td>
                            <td class="py-1 px-3 border-b">2</td>
                            <td class="py-1 px-3 border-b">商品C</td>
                          </tr>
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
                
                <div class="bg-white p-3 rounded border border-orange-200 mb-2">
                  <h5 class="font-medium text-orange-700 mb-1">INNER JOINの結果</h5>
                  <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-orange-200">
                      <thead class="bg-orange-100">
                        <tr>
                          <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">name</th>
                          <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">product</th>
                        </tr>
                      </thead>
                      <tbody class="text-sm">
                        <tr>
                          <td class="py-1 px-3 border-b">山田太郎</td>
                          <td class="py-1 px-3 border-b">商品A</td>
                        </tr>
                        <tr>
                          <td class="py-1 px-3 border-b">山田太郎</td>
                          <td class="py-1 px-3 border-b">商品B</td>
                        </tr>
                        <tr>
                          <td class="py-1 px-3 border-b">佐藤花子</td>
                          <td class="py-1 px-3 border-b">商品C</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <div class="bg-white p-3 rounded border border-orange-200">
                  <h5 class="font-medium text-orange-700 mb-1">LEFT JOINの結果</h5>
                  <div class="overflow-x-auto">
                    <table class="min-w-full bg-white border border-orange-200">
                      <thead class="bg-orange-100">
                        <tr>
                          <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">name</th>
                          <th class="py-1 px-3 border-b text-left text-xs font-semibold text-orange-700">product</th>
                        </tr>
                      </thead>
                      <tbody class="text-sm">
                        <tr>
                          <td class="py-1 px-3 border-b">山田太郎</td>
                          <td class="py-1 px-3 border-b">商品A</td>
                        </tr>
                        <tr>
                          <td class="py-1 px-3 border-b">山田太郎</td>
                          <td class="py-1 px-3 border-b">商品B</td>
                        </tr>
                        <tr>
                          <td class="py-1 px-3 border-b">佐藤花子</td>
                          <td class="py-1 px-3 border-b">商品C</td>
                        </tr>
                        <tr>
                          <td class="py-1 px-3 border-b">鈴木一郎</td>
                          <td class="py-1 px-3 border-b">NULL</td>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="text-center text-sm text-amber-700 bg-amber-50 p-3 rounded-lg mt-4">
              SQLは最初は複雑に見えるかもしれませんが、基本的なコマンドを覚えれば、<br>
              様々なデータ操作ができるようになります。実際に手を動かして練習することが大切です。
            </div>
          </div>
          
          <div class="bg-green-50 border-l-4 border-green-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-green-700">
                  <strong>練習用ツール：</strong> SQLを学ぶ際は、実際にデータベースを操作しながら学ぶのが効果的です。初心者向けには、<a href="https://www.db-fiddle.com/" target="_blank" class="text-green-600 hover:underline">DB Fiddle</a>や<a href="https://sqliteonline.com/" target="_blank" class="text-green-600 hover:underline">SQLite Online</a>などのオンラインツールがおすすめです。これらのツールでは、ブラウザ上でSQLを実行して結果を確認できます。
                </p>
              </div>
            </div>
          </div>
        </section>
        <section id="todo-example" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">5</span>
            TODOアプリのデータ設計例
          </h2>
          
          <p class="text-gray-700 mb-6">
            ここまで学んだ知識を活かして、実際にTODOアプリのデータベース設計を考えてみましょう。TODOアプリは比較的シンプルですが、実際のアプリケーション開発の流れを理解するのに適しています。
          </p>
          
          <div class="bg-gradient-to-r from-blue-100 to-cyan-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-blue-300 mb-6">
              <h3 class="text-xl font-semibold text-blue-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">📝</span>
                TODOアプリの要件
              </h3>
              
              <div class="bg-blue-50 p-4 rounded-lg mb-6">
                <h4 class="font-semibold text-blue-700 mb-2">基本機能</h4>
                <ul class="space-y-2">
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>ユーザーは新しいタスクを作成できる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクには「タイトル」「説明」「期限」「完了状態」を設定できる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクはカテゴリ分けできる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>ユーザーは自分のタスク一覧を見ることができる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクの編集・削除ができる</span>
                  </li>
                </ul>
              </div>
              
              <div class="bg-blue-50 p-4 rounded-lg">
                <h4 class="font-semibold text-blue-700 mb-2">拡張機能（オプション）</h4>
                <ul class="space-y-2">
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクに優先度を設定できる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクにタグを付けられる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクを共有して、複数人で管理できる</span>
                  </li>
                  <li class="flex items-start">
                    <span class="text-blue-500 mr-2">✓</span>
                    <span>タスクの進捗状況を記録できる</span>
                  </li>
                </ul>
              </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-cyan-300">
              <h3 class="text-xl font-semibold text-cyan-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🗂️</span>
                データベース設計
              </h3>
              
              <div class="space-y-6">
                <div class="bg-cyan-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-cyan-700 mb-2">テーブル構成</h4>
                  <p class="text-gray-700 mb-4">
                    TODOアプリに必要なテーブルを考えてみましょう：
                  </p>
                  <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div class="bg-white p-3 rounded border border-cyan-200">
                      <h5 class="font-medium text-cyan-700 mb-1">usersテーブル</h5>
                      <p class="text-sm text-gray-700 mb-2">
                        ユーザー情報を管理するテーブル
                      </p>
                      <ul class="text-xs text-gray-600 list-disc ml-4">
                        <li>id (主キー)</li>
                        <li>name (ユーザー名)</li>
                        <li>email (メールアドレス)</li>
                        <li>password (パスワード)</li>
                        <li>created_at (作成日時)</li>
                      </ul>
                    </div>
                    <div class="bg-white p-3 rounded border border-cyan-200">
                      <h5 class="font-medium text-cyan-700 mb-1">tasksテーブル</h5>
                      <p class="text-sm text-gray-700 mb-2">
                        タスク情報を管理するテーブル
                      </p>
                      <ul class="text-xs text-gray-600 list-disc ml-4">
                        <li>id (主キー)</li>
                        <li>user_id (外部キー：usersテーブルを参照)</li>
                        <li>category_id (外部キー：categoriesテーブルを参照)</li>
                        <li>title (タスクのタイトル)</li>
                        <li>description (タスクの説明)</li>
                        <li>due_date (期限日)</li>
                        <li>is_completed (完了状態)</li>
                        <li>priority (優先度：1-5など)</li>
                        <li>created_at (作成日時)</li>
                        <li>updated_at (更新日時)</li>
                      </ul>
                    </div>
                    <div class="bg-white p-3 rounded border border-cyan-200">
                      <h5 class="font-medium text-cyan-700 mb-1">categoriesテーブル</h5>
                      <p class="text-sm text-gray-700 mb-2">
                        タスクのカテゴリを管理するテーブル
                      </p>
                      <ul class="text-xs text-gray-600 list-disc ml-4">
                        <li>id (主キー)</li>
                        <li>user_id (外部キー：usersテーブルを参照)</li>
                        <li>name (カテゴリ名)</li>
                        <li>color (カテゴリの色：表示用)</li>
                      </ul>
                    </div>
                    <div class="bg-white p-3 rounded border border-cyan-200">
                      <h5 class="font-medium text-cyan-700 mb-1">tagsテーブル</h5>
                      <p class="text-sm text-gray-700 mb-2">
                        タグ情報を管理するテーブル
                      </p>
                      <ul class="text-xs text-gray-600 list-disc ml-4">
                        <li>id (主キー)</li>
                        <li>user_id (外部キー：usersテーブルを参照)</li>
                        <li>name (タグ名)</li>
                      </ul>
                    </div>
                    <div class="bg-white p-3 rounded border border-cyan-200">
                      <h5 class="font-medium text-cyan-700 mb-1">task_tagsテーブル</h5>
                      <p class="text-sm text-gray-700 mb-2">
                        タスクとタグの関連付けを管理する中間テーブル
                      </p>
                      <ul class="text-xs text-gray-600 list-disc ml-4">
                        <li>task_id (外部キー：tasksテーブルを参照)</li>
                        <li>tag_id (外部キー：tagsテーブルを参照)</li>
                      </ul>
                    </div>
                  </div>
                </div>
                
                <div class="bg-cyan-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-cyan-700 mb-2">ER図（Entity-Relationship Diagram）</h4>
                  <p class="text-gray-700 mb-4">
                    テーブル間の関係を図で表したものです：
                  </p>
                  <div class="bg-white p-4 rounded border border-cyan-200">
                    <div class="flex flex-col items-center">
                      <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div class="border-2 border-blue-400 p-2 rounded-lg">
                          <div class="bg-blue-100 p-1 text-center font-semibold text-blue-700 rounded-t-md">users</div>
                          <div class="p-1 text-xs">id (PK)</div>
                          <div class="p-1 text-xs">name</div>
                          <div class="p-1 text-xs">email</div>
                          <div class="p-1 text-xs">password</div>
                        </div>
                        
                        <div class="border-2 border-green-400 p-2 rounded-lg">
                          <div class="bg-green-100 p-1 text-center font-semibold text-green-700 rounded-t-md">categories</div>
                          <div class="p-1 text-xs">id (PK)</div>
                          <div class="p-1 text-xs">user_id (FK)</div>
                          <div class="p-1 text-xs">name</div>
                          <div class="p-1 text-xs">color</div>
                        </div>
                        
                        <div class="border-2 border-purple-400 p-2 rounded-lg">
                          <div class="bg-purple-100 p-1 text-center font-semibold text-purple-700 rounded-t-md">tags</div>
                          <div class="p-1 text-xs">id (PK)</div>
                          <div class="p-1 text-xs">user_id (FK)</div>
                          <div class="p-1 text-xs">name</div>
                        </div>
                      </div>
                      
                      <div class="border-2 border-red-400 p-2 rounded-lg mb-4 w-full md:w-2/3">
                        <div class="bg-red-100 p-1 text-center font-semibold text-red-700 rounded-t-md">tasks</div>
                        <div class="p-1 text-xs">id (PK)</div>
                        <div class="p-1 text-xs">user_id (FK)</div>
                        <div class="p-1 text-xs">category_id (FK)</div>
                        <div class="p-1 text-xs">title</div>
                        <div class="p-1 text-xs">description</div>
                        <div class="p-1 text-xs">due_date</div>
                        <div class="p-1 text-xs">is_completed</div>
                        <div class="p-1 text-xs">priority</div>
                      </div>
                      
                      <div class="border-2 border-orange-400 p-2 rounded-lg w-full md:w-1/3">
                        <div class="bg-orange-100 p-1 text-center font-semibold text-orange-700 rounded-t-md">task_tags</div>
                        <div class="p-1 text-xs">task_id (FK)</div>
                        <div class="p-1 text-xs">tag_id (FK)</div>
                      </div>
                      
                      <!-- 関係線（簡易的な表現） -->
                      <div class="mt-4 text-sm text-gray-600">
                        <p>→ users 1:N tasks (1人のユーザーは複数のタスクを持つ)</p>
                        <p>→ users 1:N categories (1人のユーザーは複数のカテゴリを持つ)</p>
                        <p>→ users 1:N tags (1人のユーザーは複数のタグを持つ)</p>
                        <p>→ categories 1:N tasks (1つのカテゴリは複数のタスクを持つ)</p>
                        <p>→ tasks N:M tags (タスクとタグは多対多の関係、中間テーブルが必要)</p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="bg-cyan-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-cyan-700 mb-2">テーブル作成のSQL例</h4>
                  <p class="text-gray-700 mb-4">
                    実際にテーブルを作成するSQLを見てみましょう：
                  </p>
                  <div class="bg-gray-100 p-3 rounded text-sm overflow-x-auto">
                    <pre><code>-- usersテーブルの作成
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- categoriesテーブルの作成
CREATE TABLE categories (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  name VARCHAR(50) NOT NULL,
  color VARCHAR(20) DEFAULT '#CCCCCC',
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- tasksテーブルの作成
CREATE TABLE tasks (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  category_id INT,
  title VARCHAR(100) NOT NULL,
  description TEXT,
  due_date DATE,
  is_completed BOOLEAN DEFAULT FALSE,
  priority INT DEFAULT 3,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE SET NULL
);

-- tagsテーブルの作成
CREATE TABLE tags (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL,
  name VARCHAR(50) NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- task_tagsテーブルの作成（中間テーブル）
CREATE TABLE task_tags (
  task_id INT NOT NULL,
  tag_id INT NOT NULL,
  PRIMARY KEY (task_id, tag_id),
  FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
  FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);</code></pre>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="text-center text-sm text-blue-700 bg-blue-50 p-3 rounded-lg mt-4">
              このデータベース設計は、基本的なTODOアプリの機能を実現するためのものです。<br>
              実際のアプリケーション開発では、要件に応じて設計を調整していくことになります。
            </div>
          </div>
          
          <div class="bg-purple-50 border-l-4 border-purple-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-purple-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-purple-700">
                  <strong>設計のポイント：</strong> データベース設計では、将来の拡張性も考慮することが重要です。例えば、このTODOアプリでは「タスクの共有」機能を後から追加することを想定して、tasksテーブルにuser_idを持たせています。また、カテゴリやタグを別テーブルにすることで、柔軟な分類が可能になります。
                </p>
              </div>
            </div>
          </div>
        </section>
        
        <!-- データを安全に守るには？ -->
        <section id="security" class="bg-white rounded-lg shadow-md p-8">
          <h2 class="text-2xl font-bold text-kinova-gray mb-6 flex items-center">
            <span class="w-8 h-8 rounded-full bg-kinova-teal text-white flex items-center justify-center mr-3 text-sm">6</span>
            データを安全に守るには？
          </h2>
          
          <p class="text-gray-700 mb-6">
            データベースには、ユーザーの個人情報や重要なビジネスデータなど、機密性の高い情報が保存されることがあります。そのため、データを安全に保護することは非常に重要です。ここでは、データベースのセキュリティについて基本的な考え方を見ていきましょう。
          </p>
          
          <div class="bg-gradient-to-r from-red-100 to-pink-100 p-6 rounded-lg mb-6">
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-red-300 mb-6">
              <h3 class="text-xl font-semibold text-red-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🔒</span>
                データベースセキュリティの基本
              </h3>
              
              <div class="space-y-4">
                <div class="bg-red-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-red-700 mb-2">1. アクセス制御</h4>
                  <p class="text-gray-700 mb-2">
                    データベースへのアクセス権限を適切に設定します。
                  </p>
                  <ul class="space-y-1 text-sm">
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>必要最小限の権限を与える（最小権限の原則）</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>データベースユーザーごとに適切な権限を設定</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>定期的に権限を見直す</span>
                    </li>
                  </ul>
                </div>
                
                <div class="bg-red-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-red-700 mb-2">2. パスワードの安全な保存</h4>
                  <p class="text-gray-700 mb-2">
                    ユーザーのパスワードは平文で保存せず、ハッシュ化して保存します。
                  </p>
                  <div class="bg-white p-3 rounded border border-red-200 text-sm">
                    <p class="mb-2"><strong>悪い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs mb-3">INSERT INTO users (name, email, password) VALUES ('山田太郎', 'yamada@example.com', 'password123');</pre>
                    <p class="mb-2"><strong>良い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs">-- パスワードをハッシュ化して保存
INSERT INTO users (name, email, password) VALUES ('山田太郎', 'yamada@example.com'
, '$2y$10$abcdefghijklmnopqrstuv');</pre>
                  </div>
                </div>
                
                <div class="bg-red-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-red-700 mb-2">3. SQLインジェクション対策</h4>
                  <p class="text-gray-700 mb-2">
                    SQLインジェクションは、悪意のあるSQLコードを注入して不正にデータベースを操作する攻撃です。
                  </p>
                  <div class="bg-white p-3 rounded border border-red-200 text-sm">
                    <p class="mb-2"><strong>危険なコード例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs mb-3">// ユーザー入力をそのままSQLに組み込む（危険！）
$username = $_POST['username'];
$query = "SELECT * FROM users WHERE username = '$username'";</pre>
                    <p class="mb-2"><strong>安全なコード例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs">// プリペアドステートメントを使用（安全）
$stmt = $pdo->prepare("SELECT * FROM users WHERE username = ?");
$stmt->execute([$_POST['username']]);</pre>
                  </div>
                </div>
                
                <div class="bg-red-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-red-700 mb-2">4. バックアップと復元</h4>
                  <p class="text-gray-700 mb-2">
                    定期的なバックアップを取り、データ損失に備えます。
                  </p>
                  <ul class="space-y-1 text-sm">
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>定期的な自動バックアップを設定</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>バックアップの保存場所を分散（オフサイトバックアップ）</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-red-500 mr-2">•</span>
                      <span>定期的にバックアップからの復元テストを実施</span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            
            <div class="bg-white rounded-lg shadow-md p-6 border-2 border-pink-300">
              <h3 class="text-xl font-semibold text-pink-700 mb-4 flex items-center">
                <span class="text-3xl mr-3">🛡️</span>
                アプリケーション開発での注意点
              </h3>
              
              <div class="space-y-4">
                <div class="bg-pink-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-pink-700 mb-2">1. 環境変数の活用</h4>
                  <p class="text-gray-700 mb-2">
                    データベース接続情報などの機密情報はソースコードに直接書かず、環境変数として管理します。
                  </p>
                  <div class="bg-white p-3 rounded border border-pink-200 text-sm">
                    <p class="mb-2"><strong>悪い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs mb-3">{String.raw`// 接続情報をハ ードコードする（危険！）
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'secret_password',
  database: 'todo_app'
});`}</pre>
                    <p class="mb-2"><strong>良い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs">{String.raw`// 環境変数から接続情報を取得（安全）
const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME
});`}</pre>
                  </div>
                </div>
                
                <div class="bg-pink-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-pink-700 mb-2">2. データの検証と浄化</h4>
                  <p class="text-gray-700 mb-2">
                    ユーザー入力データは必ず検証し、安全な形式に変換します。
                  </p>
                  <ul class="space-y-1 text-sm">
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>入力データの型、長さ、形式をチェック</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>HTMLタグやスクリプトを無害化（サニタイズ）</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>クライアント側とサーバー側の両方で検証</span>
                    </li>
                  </ul>
                </div>
                
                <div class="bg-pink-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-pink-700 mb-2">3. 適切な認証と認可</h4>
                  <p class="text-gray-700 mb-2">
                    ユーザーの認証（誰であるかの確認）と認可（何ができるかの制御）を適切に実装します。
                  </p>
                  <ul class="space-y-1 text-sm">
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>強力なパスワードポリシーを設定</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>多要素認証の導入を検討</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>セッション管理を適切に行う</span>
                    </li>
                    <li class="flex items-start">
                      <span class="text-pink-500 mr-2">•</span>
                      <span>ユーザーが自分のデータだけにアクセスできるよう制限</span>
                    </li>
                  </ul>
                </div>
                
                <div class="bg-pink-50 p-4 rounded-lg">
                  <h4 class="font-semibold text-pink-700 mb-2">4. エラーハンドリング</h4>
                  <p class="text-gray-700 mb-2">
                    エラーメッセージに機密情報が含まれないようにします。
                  </p>
                  <div class="bg-white p-3 rounded border border-pink-200 text-sm">
                    <p class="mb-2"><strong>悪い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs mb-3">{String.raw`// 詳細なエラー情報を表示（危険！）
try {
  // データベース操作
} catch (error) {
  console.error(error);
  res.status(500).send(\`\エラーが発生しました: \${error.message}\`);
}</pre>
                    <p class="mb-2"><strong>良い例：</strong></p>
                    <pre class="bg-gray-100 p-2 rounded text-xs">// 一般的なエラーメッセージを表示（安全）
try {
  // データベース操作
} catch (error) {
  console.error(error); // ログには詳細を記録
  res.status(500).send('サーバーエラーが発生しました。しばらく経ってからお試しください。');
}`}</pre>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="text-center text-sm text-red-700 bg-red-50 p-3 rounded-lg mt-4">
              セキュリティは一度だけ対策すれば終わりというものではなく、<br>
              常に最新の脅威に対応し、継続的に改善していく必要があります。<br>
              「セキュリティは最も弱い部分の強さに依存する」ということを忘れないようにしましょう。
            </div>
          </div>
          
          <div class="bg-orange-50 border-l-4 border-orange-400 p-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <svg class="h-5 w-5 text-orange-400" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                </svg>
              </div>
              <div class="ml-3">
                <p class="text-sm text-orange-700">
                  <strong>セキュリティリソース：</strong> データベースセキュリティについて詳しく学びたい方は、<a href="https://owasp.org/www-project-top-ten/" target="_blank" class="text-orange-600 hover:underline">OWASP Top 10</a>（Webアプリケーションの主要なセキュリティリスク）や、<a href="https://cheatsheetseries.owasp.org/" target="_blank" class="text-orange-600 hover:underline">OWASP Cheat Sheet Series</a>（セキュリティ対策のチートシート）を参照することをおすすめします。
                </p>
              </div>
            </div>
          </div>
        </section>
      </div>
      
      <!-- まとめ -->
      <div class="bg-white rounded-lg shadow-md p-8 mb-12">
        <h2 class="text-2xl font-semibold text-kinova-gray mb-6">まとめ：データ保存の基本を理解しよう</h2>
        
        <p class="text-gray-700 mb-6">
          この記事では、Webアプリケーションでデータを保存・管理する方法について、基本的な概念から実践的な例まで幅広く解説しました。
          データベースの種類や特徴、データの整理方法、SQLの基本、そしてセキュリティ対策まで、データ保存に関する重要なポイントを学びました。
        </p>
        
        <div class="bg-gradient-to-r from-kinova-teal to-kinova-orange p-6 rounded-lg text-white mb-6">
          <h3 class="text-xl font-semibold mb-4">今回学んだこと</h3>
          <ul class="space-y-2">
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>データの保存場所（クライアント側とサーバー側）</span>
            </li>
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>データベースの種類と特徴（リレーショナルDBとNoSQL）</span>
            </li>
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>データを整理する方法（テーブル設計、正規化など）</span>
            </li>
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>SQLの基本コマンド（SELECT, INSERT, UPDATE, DELETE）</span>
            </li>
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>TODOアプリのデータベース設計例</span>
            </li>
            <li class="flex items-start">
              <span class="bg-white/20 rounded-full w-6 h-6 flex items-center justify-center mr-2 flex-shrink-0 mt-0.5">✓</span>
              <span>データベースセキュリティの基本</span>
            </li>
          </ul>
        </div>
        
        <p class="text-gray-700 mb-6">
          データベースの知識は、Webアプリケーション開発において非常に重要です。適切なデータ設計と管理ができれば、
          効率的で安全なアプリケーションを構築することができます。この記事で学んだ基本的な概念をベースに、
          実際にデータベースを使ったアプリケーション開発に挑戦してみてください。
        </p>
        
        <div class="flex justify-center">
          <a href="/course/data-storage" class="inline-flex items-center px-6 py-3 bg-kinova-teal text-white rounded-md hover:bg-kinova-orange transition-colors">
            講座で詳しく学ぶ
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>